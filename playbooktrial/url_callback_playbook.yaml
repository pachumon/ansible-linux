#===================================================================================#
# this playbook calls a specific url as call back from the ansible playbook
# INPUT PARAMS
# host: host name of the execution server
# callback_endpoint: the amelia or any specific callback endpoint that needs to be invoked
#===================================================================================#

---
- name: Execute specific command on server
  hosts: "{{ host_name }}"

  tasks:
    - name: Send HTTP request to a callback url endpoint
      ansible.builtin.uri:
        url: "{{ callback_endpoint }}" # Replace with desired Amelia callback URL
        user: "{{ callback_username }}"
        password: "{{ callback_password }}"
        method: POST
        body: 
          aoTaskId: "{{ao_task_id}}"
          callback_state: "{{ callback_state }}"
          payload:"{{ callback_payload|to_json }}"
        body_format: json
        status_code: 200 # need to confirm if it is 200 or 201
        headers:
          Content-Type: application/json
          X-Hypera-Reply-Sync: true
          X-Amelia-ClientKey: "{{ amelia_client_key }}"
          X-DomainCode: "{{ amelia_domain_code }}"
      register: response
      until: "response.status == 200"
      retries: 3
      delay: 10


    - name: Display response
      ansible.builtin.debug:
        var: response

    - name:: dummy
      uri:
        url:  # required. HTTP or HTTPS URL in the form (http|https)://host.domain[:port]/path
        dest:  # not required. A path of where to download the file to (if desired). If I(dest) is a directory, the basename of the file on the remote server will be used.
        url_username:  # not required. A username for the module to use for Digest, Basic or WSSE authentication.
        url_password:  # not required. A password for the module to use for Digest, Basic or WSSE authentication.
        body:  # not required. The body of the http request/response to the web service. If C(body_format) is set to 'json' it will take an already formatted JSON string or convert a data structure into JSON. If C(body_format) is set to 'form-urlencoded' it will convert a dictionary or list of tuples into an 'application/x-www-form-urlencoded' string. (Added in v2.7)
        body_format: form-urlencoded # not required. choices: form-urlencoded;json;raw. The serialization format of the body. When set to C(json) or C(form-urlencoded), encodes the body argument, if needed, and automatically sets the Content-Type header accordingly. As of C(2.3) it is possible to override the `Content-Type` header, when set to C(json) or C(form-urlencoded) via the I(headers) option.
        method: GET # not required. The HTTP method of the request or response. In more recent versions we do not restrict the method at the module level anymore but it still must be a valid method accepted by the service handling the request.
        return_content: False # not required. Whether or not to return the body of the response as a "content" key in the dictionary result. Independently of this option, if the reported Content-type is "application/json", then the JSON is always loaded into a key called C(json) in the dictionary results.
        force_basic_auth: False # not required. Force the sending of the Basic authentication header upon initial request. The library used by the uri module only sends authentication information when a webservice responds to an initial request with a 401 status. Since some basic auth services do not properly send a 401, logins will fail.
        follow_redirects: all # not required. choices: all;no;none;safe;urllib2;yes. Whether or not the URI module should follow redirects. C(all) will follow all redirects. C(safe) will follow only "safe" redirects, where "safe" means that the client is only doing a GET or HEAD on the URI to which it is being redirected. C(none) will not follow any redirects. Note that C(yes) and C(no) choices are accepted for backwards compatibility, where C(yes) is the equivalent of C(all) and C(no) is the equivalent of C(safe). C(yes) and C(no) are deprecated and will be removed in some future version of Ansible.
        creates:  # not required. A filename, when it already exists, this step will not be run.
        removes:  # not required. A filename, when it does not exist, this step will not be run.
        status_code: [200] # not required. A list of valid, numeric, HTTP status codes that signifies success of the request.
        timeout: 30 # not required. The socket level timeout in seconds
        headers:  # not required. Add custom HTTP headers to a request in the format of a YAML hash. As of C(2.3) supplying C(Content-Type) here will override the header generated by supplying C(json) or C(form-urlencoded) for I(body_format).
        validate_certs: True # not required. If C(no), SSL certificates will not be validated. This should only set to C(no) used on personally controlled sites using self-signed certificates. Prior to 1.9.2 the code defaulted to C(no).
        client_cert:  # not required. PEM formatted certificate chain file to be used for SSL client authentication. This file can also include the key as well, and if the key is included, I(client_key) is not required
        client_key:  # not required. PEM formatted file that contains your private key to be used for SSL client authentication. If I(client_cert) contains both the certificate and key, this option is not required.
        src:  # not required. Path to file to be submitted to the remote server. Cannot be used with I(body).
        remote_src: False # not required. If C(no), the module will search for src on originating/master machine. If C(yes) the module will use the C(src) path on the remote/target machine.
        force: False # not required. If C(yes) do not get a cached copy. Alias C(thirsty) has been deprecated and will be removed in 2.13.
        use_proxy: True # not required. If C(no), it will not use a proxy, even if one is defined in an environment variable on the target hosts.
        unix_socket:  # not required. Path to Unix domain socket to use for connection
        http_agent: ansible-httpget # not required. Header to identify as, generally appears in web server logs.
        mode:  # not required. The permissions the resulting file or directory should have. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)). As of Ansible 2.6, the mode may also be the special string C(preserve). When set to C(preserve) the file will be given the same permissions as the source file.
        owner:  # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
        group:  # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
        seuser:  # not required. The user part of the SELinux file context. By default it uses the C(system) policy, where applicable. When set to C(_default), it will use the C(user) portion of the policy if available.
        serole:  # not required. The role part of the SELinux file context. When set to C(_default), it will use the C(role) portion of the policy if available.
        setype:  # not required. The type part of the SELinux file context. When set to C(_default), it will use the C(type) portion of the policy if available.
        selevel: s0 # not required. The level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). When set to C(_default), it will use the C(level) portion of the policy if available.
        unsafe_writes: False # not required. Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner. This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
        attributes:  # not required. The attributes the resulting file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr). The C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.
